@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient httpClient
@inject NavigationManager Navigation

<body>
	<div class="login-div">
		<div class="login-creds-box">
			<div class="login-label">Войдите в свой аккаунт!</div>
			<div class="credential-label">Адрес электронной почты</div>
			<input class="form-control" style="@(hasFailedAttempt ? "border: 2px solid red" : "")" type="email" placeholder="Введите электронную почту" @bind=loginDTO.Email />
			<div class="credential-label">Пароль</div>
			<input class="form-control" style="@(hasFailedAttempt ? "border: 2px solid red" : "")" type="password" placeholder="Введите ваш пароль" @bind=loginDTO.Password />
			<button class="login-button" @onclick=SendLoginRequest>Войти</button>
			<div style="visibility: @(hasFailedAttempt ? "visible" : "collapse")" class="failed-login-info">Удостовертесь что введенные вами данные верны и попробуйте снова</div>
		</div>
	</div>
</body>

@code {
	struct UserLoginDTO
	{
		public string Email { get; set; }
		public string Password { get; set; }
	}

	bool hasFailedAttempt = false;

	UserLoginDTO loginDTO = new();

	protected Dictionary<string, string?> _queryParams = new() 
	{
		{"useCookies", "true" },
		{"useSessionCookies", "true" }
	};

	public async Task SendLoginRequest()
	{
		string loginEndPoint = "https://localhost:7247/login";
		string loginRequest = QueryHelpers.AddQueryString(loginEndPoint, _queryParams);

		HttpResponseMessage responseMessage = await httpClient.PostAsJsonAsync(loginRequest, loginDTO);

		if(responseMessage.IsSuccessStatusCode)
		{
			Navigation.NavigateTo("all_apps");
		}
		else if(responseMessage.StatusCode == System.Net.HttpStatusCode.Unauthorized)
		{
			hasFailedAttempt = true;
		}
	}
}
