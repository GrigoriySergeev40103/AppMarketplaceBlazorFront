@page "/app_page/{appId}"
@using AppMarketplaceBlazorFront.DTOs
@using AppMarketplaceBlazorFront.Services
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient httpClient
@inject PersonalData personalData;
@inject NavigationManager Navigation

@if(justBought)
{
	<div class="modal" id="upload_success-modal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Успешное приобретение приложения!</h5>
				</div>
				<div class="modal-body">
					<p>Это приложение теперь ваше!</p>
				</div>
				<div class="modal-footer">
					<a href=@($"https://localhost:7247/api/Apps/DownloadAppById?appId={_app!.AppId}") class="btn btn-primary">Скачать</a>
					<button type="button" @onclick=ToMainPage class="btn btn-primary">На главную</button>
				</div>
			</div>
		</div>
	</div>
}

<div class="app-page">

	@if(_app != null)
	{
		<div class="app-name-title">@_app.Name</div>
		<div class="dev-name-title"><b class="dev-name-decorator">by </b> @_developer?.UserName</div>
		<div class="app-desc-body">
			<div class="pic-desc-div">
				<img class="app-pic" src=@($"https://localhost:7247/api/Apps/GetAppImage?appId={_app.AppId}") />
				<div class="spec-desc">@_app.SpecialDescription</div>
				<div class="desc">@_app.Description</div>
			</div>
			<div class="acquire-div">
				<div class="name-price">
					<div class="app-name">@_app.Name</div>
					<div class="app-price">@(Decimal.Round(_app.Price, 2)) Руб</div>
				</div>
				<div class="spec-desc-acquire">@_app.SpecialDescription</div>
				@if(personalData.CurrentUser != null)
				{
					@if (owned)
					{
						<a class="buy-app-button" href=@($"https://localhost:7247/api/Apps/DownloadAppById?appId={_app!.AppId}")>Скачать</a>
					}
					else
					{
						<button class="buy-app-button" @onclick=OnBuyButtonClick>@(_app.Price != 0 ? "Купить" : "Приобрести")</button>
					}
				}
			</div>
		</div>
	}
</div>

@code {
	bool justBought = false;
	bool owned = false;

	[Parameter]
	public string AppId { get; set; } = string.Empty;

	AppDTO? _app;
	UserDTO? _developer;

	protected override async Task OnInitializedAsync()
	{
		AppDTO? app = await httpClient.GetFromJsonAsync<AppDTO?>($"https://localhost:7247/api/Apps/GetAppById?appId={AppId}");
		if (app != null)
		{
			_app = app;

			try
			{
				_developer = await httpClient.GetFromJsonAsync<UserDTO>($"https://localhost:7247/api/Users/GetUserById?userId={_app.DeveloperId}");

				HttpResponseMessage responseMessage = await httpClient.GetAsync($"https://localhost:7247/api/Apps/IsOwned?appId={_app.AppId}");
				if (responseMessage.IsSuccessStatusCode)
					owned = true;
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
		}
	}

	protected async Task OnBuyButtonClick()
	{
		if (_app == null || personalData.CurrentUser == null)
			return;

		HttpResponseMessage response = await httpClient.PostAsync($"https://localhost:7247/api/Apps/AcquireAppById?appId={AppId}", null);

		if(response.IsSuccessStatusCode)
		{
			personalData.CurrentUser.Balance -= _app.Price;
			justBought = true;
		}
	}

	private void ToMainPage()
	{
		Navigation.NavigateTo("/");
	}
}
