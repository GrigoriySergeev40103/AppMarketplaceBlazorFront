@page "/upload_app"
@using AppMarketplaceBlazorFront.DTOs
@inject HttpClient httpClient
@inject IJSRuntime JS;
@inject NavigationManager Navigation

<div class="upload-app-page">
	<div class="nice-frame-div">
		<img class="nice-frame" src="/AllAppsBeutyFrame.jpg" />
		<div class="nice-frame-text">Загрузите приложение</div>
	</div>

	<div class="modal" id="upload_success-modal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Успешная загрузка приложения!</h5>
				</div>
				<div class="modal-body">
					<p>Ваше приложение было успешно загружено!</p>
				</div>
				<div class="modal-footer">
					<button type="button" @onclick=ToMainPage class="btn btn-primary">На главную</button>
				</div>
			</div>
		</div>
	</div>

	<div class="app-info-div">
		<div>
			<div class="app-image-div mb-4 d-flex justify-content-center">
				<img class="app-img" id="selectedImage" src="https://mdbootstrap.com/img/Photos/Others/placeholder.jpg"
					 alt="example placeholder" />
			</div>
			<div class="d-flex justify-content-center">
				<div class="btn btn-primary btn-rounded">
					<label class="form-label text-white m-1" for="appImageInput">Выберите файл</label>
					<input type="file" class="form-control d-none" id="appImageInput" onchange="displaySelectedImage(event, 'selectedImage')" />
				</div>
			</div>
		</div>

		<div class="app-desc-div">
			<div class="img-upload-label">Загрузите приложение</div>
			<div class="upload-img-grid">
				<div class="upload-img-info">Zip, Rar, 7Zip, tgz. Макс. размер: 100GB</div>
				<label for="file-upload" class="upload-img-button">
					Загрузить
				</label>
				<input class="hide-input" id="file-upload" multiple type="file"/>

			</div>
			<div class="desc-input-label">Название<div class="desc-star-mark">*</div></div>
			<input class="desc-input" placeholder="к примеру: No Cap App" @bind=Name/>
			<div class="desc-input-label">Краткое описание<div class="desc-star-mark">*</div></div>
			<input class="desc-input" placeholder="например: Приложение для развития памяти" @bind=SpecialDescription />
			<div class="desc-input-label">Описание<div class="desc-star-mark">*</div></div>
			<textarea class="desc-input" placeholder="например: Приложение для развития памяти" @bind=Description />
			<div class="desc-input-label">Цена<div class="desc-star-mark">*</div></div>
			<input class="desc-input" type="number" placeholder="0" @bind=Price/>
			<div class="desc-input-label">Категория<div class="desc-star-mark">*</div></div>
			<select class="select-category" id="select-category">
				@if(_appCategories != null)
				{
					@foreach (var category in _appCategories)
					{
						<option value=@category.CategoryName>@category.CategoryName</option>
					}
				}
			</select>
			<button class="upload-button" @onclick=Upload>Загрузить</button>
			<div id="upload-pb" class="upload-pb-hide">
				<div class="pb-pause-unpause" id="pb-pause-unpause">
					<div class="progress" style="width: 100%;">
						<div id="upload-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
					</div>
					<i class="fas fa-pause fa-5x" id="upload-pause-btn"></i>
				</div>
			</div>
		</div>
	</div>
</div>

<script src="https://kit.fontawesome.com/ebf3f66647.js" crossorigin="anonymous"></script>
<script>
	function displaySelectedImage(event, elementId) {
		const selectedImage = document.getElementById(elementId);
		const fileInput = event.target;

		if (fileInput.files && fileInput.files[0]) {
			const reader = new FileReader();

			reader.onload = function (e) {
				selectedImage.src = e.target.result;
			};

			reader.readAsDataURL(fileInput.files[0]);
		}
	}
</script>

@code {
	IEnumerable<AppCategory>? _appCategories;

	string Name { get; set; } = "";
	string Description { get; set; } = "";
	string SpecialDescription { get; set; } = "";
	uint Price { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		string endpoint = "https://localhost:7247/api/AppCategories/GetAppCategories";

		_appCategories = await httpClient.GetFromJsonAsync<IEnumerable<AppCategory>>(endpoint);
	}

	private IJSObjectReference MyJsModule { get; set; } = null!;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Load the JS Helpers Module
			MyJsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/UploadApp.razor.js");
		}
	}

	private async Task Upload()
	{
		// Calls into js function that uploads an app through tus protocol, on finish pops a modal up
		await MyJsModule.InvokeVoidAsync("UploadAppJs", Name, Description, SpecialDescription, Price);
	}

	private void ToMainPage()
	{
		Navigation.NavigateTo("/");
	}
}
